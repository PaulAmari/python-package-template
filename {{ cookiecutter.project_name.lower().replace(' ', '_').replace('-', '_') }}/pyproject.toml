{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3': 'License :: OSI Approved :: BSD License',
    'GNU GPL v3.0': 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
} -%}
{%- set python_version_splitted = cookiecutter.minimal_python_version.split('.') | map('int') | list -%}
# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
authors = ["{{ cookiecutter.organization }} <{{ cookiecutter.email }}>"]
license = "{{ cookiecutter.license }}"
repository = "https://github.com/{{ cookiecutter.github_name }}/{{ cookiecutter.project_name }}"
homepage = "https://github.com/{{ cookiecutter.github_name }}/{{ cookiecutter.project_name }}"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  #! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "{{ license_classifiers[cookiecutter.license] }}",
  "Programming Language :: Python :: 3",
  {%- for minor_version in cookiecutter._all_python_minor_version if minor_version >= python_version_splitted[1] %}
  "Programming Language :: Python :: 3.{{ minor_version }}",{% endfor %}
]

{% if cookiecutter.create_example_template == 'cli' -%}[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"{{ cookiecutter.project_name }}" = "{{ cookiecutter.project_name.lower().replace(' ', '_').replace('-', '_') }}.__main__:app"{%- endif %}

[tool.poetry.dependencies]
python = "^{{ cookiecutter.minimal_python_version }}"
{% if cookiecutter.minimal_python_version == '3.10' -%}importlib_metadata = {version = "^4.5.0", python = "<3.10"}{%- endif -%}
{%+ if cookiecutter.create_example_template == 'cli' %}
typer = {extras = ["all"], version = "^0.4.0"}
rich = "^10.14.0"
{% endif %}

[tool.poetry.group.dev.dependencies]
bandit = "^1.7.8"
mypy-extensions = "^1.0.0"
pre-commit = "^3"
pylint = "^3"
pytest = "^8"
coverage = "^7"
coverage-badge = "^1.1.1"
pytest-cov = "^5"
pytest-html = "^4"
safety = "^3"
pyupgrade = "^3"
mypy = "^1"
cyclonedx-bom = "^4.4.2"
pip-licenses = "^4.4.0"
pipdeptree = "^2.18.1"
sphinx = "^7.3.7"
gitlint = "^0.19.1"
autoflake = "^2.3.1"
docformatter = "^1.7.5"
ruff = "^0.4.2"
tox = "^4.14.1"

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py39"
src = ["alpy_train", "tests"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "ANN001",  # Missing type annotation for function argument `name`
  "ANN102",  # Missing type annotation for `cls` in classmethod
  "ANN101",  # Missing type annotation for `self` in method
  "D212",    # [*] Multi-line docstring summary should start at the first line
  "ICN001",  # `pandas` should be imported as `pd`Ruff
  "PD901",   # Avoid using the generic variable name `df` for DataFrames
  "PLR2004", # Magic value used in comparison, consider replacing `2` with a constant variable
  "TCH001",  # Move application import `alpy_train.data.enum.TrainingMode` into a type-checking block
  "TID252",  # Prefer absolute imports over relative imports from parent modules
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  "E402", #
  "D104", # Missing docstring in public package
]
"**/{tests}/*" = [
  "ANN201", # Missing return type annotation for public function
  "D103",   # Missing docstring in public function
  "S101",   # Use of `assert` detected
]

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = "3.10"
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
testpaths = [
    "tests",
    "integration",
]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

[tool.coverage.run]
source = ["tests"]

[coverage.paths]
source = "alpy_train"

[coverage.run]
branch = true

[coverage.report]
fail_under = 50
show_missing = true
