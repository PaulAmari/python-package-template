[tox]
requires =
    tox>=4
env_list =
    py{310,311}
    type
    lint
    safety
    coverage
    format

[testenv]
description = run tests: pytest
skip_install = true
allowlist_externals = poetry
commands_pre = 
    poetry env use {envpython}
    poetry install

commands =
    poetry run pytest {posargs:tests}

[testenv:type]
description = run type check: mypy
skip_install = true
allowlist_externals = poetry
commands_pre = 
    poetry install
commands = 
    poetry run mypy {posargs:{{ cookiecutter.project_name.lower().replace(' ', '_').replace('-', '_') }} tests}

[testenv:format] 
description = autoformat code: ruff
skip_install = true
allowlist_externals = poetry
commands_pre =
    poetry install 
commands =
    poetry run ruff format pyproject.toml ./
    poetry run ruff check --fix pyproject.toml ./

[testenv:coverage]
description = run coverage report
skip_install = true
allowlist_externals = poetry
commands_pre =
    poetry install
commands =
    poetry run pytest -c pyproject.toml --cov-report=html --cov={{ cookiecutter.project_name.lower().replace(' ', '_').replace('-', '_') }} tests/
    poetry run coverage-badge -o assets/images/coverage.svg -f

[testenv:lint]
description = run linter: ruff
skip_install = true
allowlist_externals = poetry
commands_pre =
    poetry install
commands = poetry run ruff check {posargs:{{ cookiecutter.project_name.lower().replace(' ', '_').replace('-', '_') }} tests}

[testenv:safety]
description = run safety check: safety, bandit
skip_install = true
allowlist_externals = poetry
commands_pre =
    poetry install
commands =
    poetry check
	# poetry run safety check --full-report
	poetry run bandit -l --recursive {{ cookiecutter.project_name.lower().replace(' ', '_').replace('-', '_') }}
	poetry run bandit -l --recursive -s B101 tests
